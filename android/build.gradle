def setupEnvFile(searchParam) {
    if (searchParam !== null && System.properties[searchParam] !== null) {
        return System.properties[searchParam]
    }

    if (System.properties['ENV_FILE_PATH'] == null) {
        // First try searching on project root.
        def projectFileEnv = new File("$rootProject.rootDir/../clearsale.gradle.env")
        def projectFileEnvExists = projectFileEnv.exists()
        if (projectFileEnvExists) {
            System.properties['ENV_FILE_PATH'] = projectFileEnv.path
        } else {
            System.properties['ENV_FILE_PATH'] = System.env.DIRNAME ?: System.env.PWD + "/../clearsale.gradle.env"
        }
    }

    file(System.properties['ENV_FILE_PATH']).readLines().each() {
        def (key, value) = it.tokenize('=');
        if (key !== null && value !== null) {
            System.properties[key] = value
        } else {
            throw new InvalidUserDataException("[CSLivenessFlutter SDK] - Invalid value for clearsale.gradle.env. Received key: $key, value: $value")
        }
    }

    if (searchParam !== null) {
        return System.properties[searchParam]
    }

    return null
}

setupEnvFile()

group = "com.example.liveness_flutter_sdk"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.7.10"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://pkgs.dev.azure.com/CS-PublicPackages/SDKS/_packaging/SDKS/maven/v1"
        }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.example.liveness_flutter_sdk"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")

        // org.jetbrains.kotlin:kotlin-bom artifact purpose is to align kotlin stdlib and related code versions.
        // See: https://youtrack.jetbrains.com/issue/KT-55297/kotlin-stdlib-should-declare-constraints-on-kotlin-stdlib-jdk8-and-kotlin-stdlib-jdk7
        implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.10"))
        implementation "sale.clear.studio:sdk-csliveness:$System.properties.CS_LIVENESS_VERSION"
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
